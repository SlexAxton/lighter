import grammars from "./grammars.mjs";
import themes from "./themes.mjs";
import { promises as fs } from "fs";

async function updateDynamicImports() {
  const grammarCases = grammars
    .map(
      (g) => `    case "${g.name}":
      return import("${g.importPath}");`
    )
    .join("\n");

  const themeCases = themes
    .map(
      (name) => `    case "${name}":
      return import("../themes/${name}.json");`
    )
    .join("\n");

  const content = `// generated by lib/utils/01.dynamic-imports.mjs

export async function importGrammar(langId: string): Promise<any> {
  switch (langId) {
${grammarCases}
    default:
      throw new Error("no grammar for " + langId);
  }
}

export async function importTheme(name: string): Promise<any> {
  switch (name) {
${themeCases}
    default:
      throw new Error("no theme for " + name);
  }
}
`;
  await fs.writeFile("./src/dynamic-imports.ts", content, "utf8");
}

await updateDynamicImports();

console.log("Updated lib/src/dynamic-imports.ts");

// console.table(grammars.map((g) => ({ name: g.name, size: g.byteSize })));
